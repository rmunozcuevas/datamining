df -> Final_data.csv 

Final_data.csv -> columns: Age	Gender	Weight (kg)	Height (m)	
Max_BPM	Avg_BPM	Resting_BPM	Session_Duration (hours)	Calories_Burned	Workout_Type	Fat_Percentage	
Water_Intake (liters)	Workout_Frequency (days/week)	Experience_Level	BMI	Daily meals frequency	
Physical exercise	Carbs	Proteins	Fats	Calories	meal_name	meal_type	diet_type	
sugar_g	sodium_mg	cholesterol_mg	serving_size_g	cooking_method	prep_time_min	cook_time_min	rating	
Name of Exercise	Sets	Reps	Benefit	Burns Calories (per 30 min)	Target Muscle Group	Equipment Needed	
Difficulty Level	Body Part	Type of Muscle	Workout	BMI_calc	cal_from_macros	pct_carbs	protein_per_kg	
pct_HRR	pct_maxHR	cal_balance	lean_mass_kg	expected_burn	Burns Calories (per 30 min)_bc	Burns_Calories_Bin


splitdataset() -> focusing on splitting calories_burned since that was a target variable

clean_data() -> I got a bit more specific in what columns I wanted to drop 
df_clean -> used clean_data() -> columns: Index(['Age', 'Gender', 'Weight (kg)', 'Height (m)', 'Max_BPM', 
'Avg_BPM', 'Resting_BPM', 'Session_Duration (hours)', 'Calories_Burned', 'Fat_Percentage', 
'Water_Intake (liters)', 'Workout_Frequency (days/week)', 'Experience_Level', 'BMI', 
'Daily meals frequency', 'Physical exercise', 'Carbs', 'Proteins', 'Fats', 'Calories', 
'sugar_g', 'sodium_mg', 'cholesterol_mg', 'serving_size_g', 'rating', 'Sets', 'Reps', 
'Burns Calories (per 30 min)', 'protein_per_kg', 'lean_mass_kg', 'expected_burn'], dtype='object')


after clean (20,000, 31) (31 columsn left in, I had to clean a bunch of columns that I didn't want)

clean_prob_one()

columns kept: ['Workout_Frequency (days/week)','Name of Exercise',
'Session_Duration (hours)', 'Calories_Burned', 'Weight (kg)',
'Avg_BPM','Fat_Percentage','Water_Intake (liters)']

prob_one variable has the data of the function being used on df



I think I created this function was because regression can't use any text based columns obviously
regression_clean()
colummns kept: ['Workout_Frequency (days/week)','Session_Duration (hours)', 
'Calories_Burned', 'Weight (kg)','Avg_BPM','Fat_Percentage','Water_Intake (liters)']

feature_columns_simple = [
    'Workout_Frequency (days/week)',
    'Session_Duration (hours)', 
    'Calories_Burned',
    'Weight (kg)',
    'Avg_BPM',
    'Fat_Percentage'
    # REMOVE the interaction terms
]

X_simple -> df variable with only columns listed above
y -> Water_Intake (liters) variable from df


From the simple model results, it looks like there is a weak correlation in general, I think it will be best to use a heatmap
and then go from there to find correlations within this dataset

target_cols = [
    "Session_Duration (hours)",
    "Workout_Frequency (days/week)", 
    "Weight (kg)",
    "Calories_Burned",
    "Avg_BPM", 
    "Fat_Percentage"
]

data_two = df[target_cols]


plt.figure(figsize=(8,6))

sns.heatmap(
    data_two.corr(), linewidth=0.5
)
plt.show()
print(df[target_cols].dtypes)

This was honestly kinda dissapointing, I was thinking I was gonna find heavy correlations with these variables but I guess not,
I might try to use other variables to see if there are correlations

code-explanation: target_cols -> features from dataset I am doing to use (from df)
Heatmap created using specific columns from df and applying .corr to see if there is a correlation with any of the variables
slight correlations, some of the highest correlations at like .6 so who knows



After digging deeper to find correlations compared to calories_burned:

Calories_Burned                   1.000000
Session_Duration (hours)          0.814368
expected_burn                     0.773932
Experience_Level                  0.697116

These were the highest

I might have to readjust my target variable

correlations
TV -> 'Calories_Burned'
Age -> 20-25

Calories_Burned                   1.000000
Session_Duration (hours)          0.825102
expected_burn                     0.799638
Experience_Level                  0.722552
Workout_Frequency (days/week)     0.608916


TV -> Max_BPM
Age -> 18-20 (1335 datapoints)



Promising target feature: lean_mass_kg
from ages 18-20

TV -> lean_mass_kg
Age -> 18-20





